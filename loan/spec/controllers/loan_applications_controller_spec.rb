require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe LoanApplicationsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # LoanApplication. As you add validations to LoanApplication, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      loan_amount: 50000,
      prop_value: 5000,
      ssn: "555158423"
    }
  }

  let(:invalid_attributes) {
    {}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # LoanApplicationsController. Be sure to keep this updated too.
  let(:valid_session) { {} }


  describe "GET #show" do
    it "assigns the requested loan_application as @loan_application" do
      loan_application = LoanApplication.create! valid_attributes
      get :show, {id: loan_application.to_param}, session: valid_session
      expect(assigns(:loan_application)).to eq(loan_application)
    end
  end

  describe "GET #new" do
    it "assigns a new loan_application as @loan_application" do
      get :new, params: {}, session: valid_session
      expect(assigns(:loan_application)).to be_a_new(LoanApplication)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new LoanApplication" do
        expect {
          post :create, {loan_application: valid_attributes}, session: valid_session
        }.to change(LoanApplication, :count).by(1)
      end

      it "assigns a newly created loan_application as @loan_application" do
        post :create, {loan_application: valid_attributes}, session: valid_session
        expect(assigns(:loan_application)).to be_a(LoanApplication)
        expect(assigns(:loan_application)).to be_persisted
      end

      it "redirects to the created loan_application" do
        post :create, {loan_application: valid_attributes}, session: valid_session
        expect(response).to redirect_to(LoanApplication.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved loan_application as @loan_application" do
        post :create, {loan_application: invalid_attributes}, session: valid_session
        expect(assigns(:loan_application)).to be_a_new(LoanApplication)
      end

      it "re-renders the 'new' template" do
        post :create, {loan_application: invalid_attributes}, session: valid_session
        expect(response).to render_template("new")
      end
    end
  end



end
